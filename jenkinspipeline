pipeline {
    agent any
    tools {
        jdk 'jdk17'
        nodejs 'node16'
    }
    environment {
        SCANNER_HOME = tool 'mysonar'
    }

    stages {
        stage('clean WS') {
            steps {
                cleanWs()
            }
        }
        stage('code') {
            steps {
                git 'https://github.com/devops0014/Zomato-Project.git'
            }
        }
        stage("Sonarqube Analysis") {
            steps {
                withSonarQubeEnv('mysonar') {
                    sh """
                        $SCANNER_HOME/bin/sonar-scanner \
                        -Dsonar.projectName=zomato \
                        -Dsonar.projectKey=zomato
                    """
                }
            }
        }
        stage('quality gates') {
            steps {
                waitForQualityGate abortPipeline: false, credentialsId: 'sonar-token'
            }
        }
        stage('install dependencies') {
            steps {
                sh 'npm install'
            }
        }
        stage('OWASP') {
            steps {
                dependencyCheck additionalArguments: '--scan ./ --disableYarnAudit -disableNodeAudit', odcInstallation: 'DP-Check'
                dependencyCheckPublisher pattern: '**/dependency-check-report.xml'
            }
        }
        stage('trivy') {
            steps {
                sh 'trivy fs . > trivyfs.txt'
            }
        }
        stage('build') {
            steps {
                sh 'docker build -t image1 .'
            }
        }
        stage('tag & push') {
            steps {
                script {
                    withDockerRegistry(credentialsId: 'docker') {
                        sh 'docker tag image1 animeshnikhare97/mydockerproject:myzomatoimage'
                        sh 'docker push animeshnikhare97/mydockerproject:myzomatoimage'
                    }
                }
            }
        }
        stage('scan the image') {
            steps {
                sh 'trivy image animeshnikhare97/mydockerproject:myzomatoimage'
            }
        }
        stage('container') {
            steps {
                sh 'docker run -d --name cont1 -p 3000:3000 animeshnikhare97/mydockerproject:myzomatoimage'
            }
        }
    }
}
